# Running docker containers as:
#
# macOS running as x86: docker run --platform=linux/amd64 -it -v ${PWD}:/radarkit gcc
# macOS running as arm: docker run -it -v ${PWD}:/radarkit gcc
# linux running native: docker run -it -v ${PWD}:/radarkit gcc

stages:
  - build
  - test

variables:
  CC: "gcc"
  FAIL_STRING: "\e[38;5;214mFailed\e[m"
  PASS_STRING: "\e[38;5;46mAll tests passed\e[m"

before_script:
  - export TERM=xterm-256color
  - apt update && apt install -y bc libfftw3-dev libnetcdf-dev libssl-dev libarchive-dev

make_ctypes:
  tags:
    - linux
  stage: build
  image: python
  script:
    - ls -al
    - pip install -U pip && pip install ctypesgen
    - git branch -D ${CI_COMMIT_BRANCH}
    - git remote prune origin
    - git checkout ${CI_COMMIT_BRANCH}
    - git pull
    - make ctypes
    - ls -al python/src/radarkit/
    - sha1sum python/src/radarkit/_ctypes_.py
  artifacts:
    expire_in: 1 week
    paths:
      - python/src/radarkit/_ctypes_.py

build_linux:
  tags:
    - linux, x86_64
  stage: build
  image: gcc
  script:
    - git checkout ${CI_COMMIT_BRANCH}
    - git pull
    - make
  artifacts:
    expire_in: 1 week
    paths:
      - libradarkit.a
      - libradarkit.so
      - rkutil

build_mac:
  tags:
    - macos, arm64
  stage: build
  image: gcc
  script:
    - git checkout ${CI_COMMIT_BRANCH}
    - git pull
    - make

basic:
  tags:
    - linux
  stage: test
  image: gcc
  needs:
    - build_linux
  script:
    - ls -al
    - ee=0
    - ./rkutil -T101; ee=$((ee+$?))
    - ./rkutil -T102; ee=$((ee+$?))
    - ./rkutil -T103; ee=$((ee+$?))
    - ./rkutil -T104; ee=$((ee+$?))
    - ./rkutil -T105; ee=$((ee+$?))
    - ./rkutil -T106; ee=$((ee+$?))
    - echo -n "" && [[ ${ee} == 0 ]] && echo ${PASS_STRING} || echo ${FAIL_STRING}
    - exit ${ee}

numeric:
  tags:
    - linux
  stage: test
  image: gcc
  needs:
    - build_linux
  script:
    - ls -al
    - ee=0
    - ./rkutil -T501; ee=$((ee+$?))
    - ./rkutil -T502; ee=$((ee+$?))
    - ./rkutil -T503; ee=$((ee+$?))
    - ./rkutil -T504; ee=$((ee+$?))
    - ./rkutil -T505; ee=$((ee+$?))
    - ./rkutil -T506; ee=$((ee+$?))
    - ./rkutil -T507; ee=$((ee+$?))
    - echo -n "" && [[ ${ee} == 0 ]] && echo ${PASS_STRING} || echo ${FAIL_STRING}
    - exit ${ee}

performance:
  tags:
    - linux
  stage: test
  image: gcc
  needs:
    - build_linux
  script:
    - ls -al
    - ee=0
    - ./rkutil -T601; ee=$((ee+$?))
    - ./rkutil -T602; ee=$((ee+$?))
    - ./rkutil -T603; ee=$((ee+$?))
    - ./rkutil -T604; ee=$((ee+$?))
    - echo -n "" && [[ ${ee} == 0 ]] && echo ${PASS_STRING} || echo ${FAIL_STRING}
    - exit ${ee}
# should_fail:
#   tags:
#     - linux
#   stage: test
#   image: gcc
#   needs:
#     - build_linux
#   script:
#     - cd radarkit
#     - exit 1
