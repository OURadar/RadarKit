# Running docker containers as:
#
# macOS running as x86: docker run --platform=linux/amd64 -it -v ${PWD}:/radarkit gcc
# macOS running as arm: docker run -it -v ${PWD}:/radarkit gcc
# linux running native: docker run -it -v ${PWD}:/radarkit gcc

stages:
  - build
  - test

variables:
  CC: "gcc"
  FAIL_STRING: "\e[38;5;214mFailed\e[m"
  PASS_STRING: "\e[38;5;46mAll tests passed\e[m"

before_script:
  - export TERM=xterm-256color
  - export LS_COLORS="rs=0:di=38;5;45:ln=38;5;51:mh=44;38;5;15:pi=40;38;5;11:so=38;5;13:do=38;5;5:bd=48;5;232;38;5;11:cd=48;5;232;38;5;3:or=48;5;232;38;5;9:mi=05;48;5;232;38;5;15:su=48;5;196;38;5;15:sg=48;5;11;38;5;16:ca=48;5;196;38;5;226:tw=48;5;10;38;5;16:ow=48;5;57;38;5;11:st=48;5;21;38;5;15:ex=38;5;82:*.py=38;5;228:*.c=38;5;220:*.cpp=38;5;220:*.js=38;5;227:*.mjs=38;5;227:*.jsx=38;5;31:*.h=38;5;208:*.hpp=38;5;208:*makefile=38;5;208:*.html=38;5;208:*.tar=38;5;178:*.tgz=38;5;178:*.txz=38;5;178:*.zip=38;5;178:*.z=38;5;178:*.Z=38;5;178:*.gz=38;5;178:*.xz=38;5;178:*.bz2=38;5;178:*.bz=38;5;178:*.rar=38;5;9:*.jpg=38;5;13:*.jpeg=38;5;13:*.gif=38;5;13:*.bmp=38;5;13:*.tif=38;5;13:*.tiff=38;5;13:*.png=38;5;13:*.svg=38;5;13:*.svgz=38;5;13:*.mp4=38;5;135:*.m4v=38;5;135:*.mkv=38;5;135:*.mov=38;5;135:*.mpg=38;5;135:*.mpeg=38;5;135:*.vob=38;5;135:*.qt=38;5;135:*.mp3=38;5;105:*.aac=38;5;105:*.mka=38;5;105:*.ogg=38;5;105:*.wav=38;5;105:*.flac=38;5;105"
  - apt update && apt install -y bc libfftw3-dev libnetcdf-dev libssl-dev libarchive-dev

make_ctypes:
  tags:
    - linux
  stage: build
  image: python
  script:
    - make showinfo
    - ls -hal --group-directories-first --color
    - pip install -U pip && pip install ctypesgen
    - make ctypes
    - ls -hal --group-directories-first --color python/src/radarkit/
    - sha1sum python/src/radarkit/_ctypes_.py
  artifacts:
    expire_in: 1 week
    paths:
      - python/src/radarkit/_ctypes_.py

build_linux:
  tags:
    - linux, x86_64
  stage: build
  image: gcc
  script:
    - make
  artifacts:
    expire_in: 1 week
    paths:
      - libradarkit.a
      - libradarkit.so
      - rkutil

build_mac:
  tags:
    - macos, arm64
  stage: build
  image: gcc
  script:
    - make

basic:
  tags:
    - linux
  stage: test
  image: gcc
  needs:
    - build_linux
  script:
    - ls -hal --group-directories-first --color
    - ee=0
    - ./rkutil -T101; ee=$((ee+$?))
    - ./rkutil -T102; ee=$((ee+$?))
    - ./rkutil -T103; ee=$((ee+$?))
    - ./rkutil -T104; ee=$((ee+$?))
    - ./rkutil -T105; ee=$((ee+$?))
    - ./rkutil -T106; ee=$((ee+$?))
    - echo -n "" && [[ ${ee} == 0 ]] && echo ${PASS_STRING} || echo ${FAIL_STRING}
    - exit ${ee}

numeric:
  tags:
    - linux
  stage: test
  image: gcc
  needs:
    - build_linux
  script:
    - ls -hal --group-directories-first --color
    - ee=0
    - ./rkutil -T501; ee=$((ee+$?))
    - ./rkutil -T502; ee=$((ee+$?))
    - ./rkutil -T503; ee=$((ee+$?))
    - ./rkutil -T504; ee=$((ee+$?))
    - ./rkutil -T505; ee=$((ee+$?))
    - ./rkutil -T506; ee=$((ee+$?))
    - ./rkutil -T507; ee=$((ee+$?))
    - echo -n "" && [[ ${ee} == 0 ]] && echo ${PASS_STRING} || echo ${FAIL_STRING}
    - exit ${ee}

performance:
  tags:
    - linux
  stage: test
  image: gcc
  needs:
    - build_linux
  script:
    - ls -hal --group-directories-first --color
    - ee=0
    - ./rkutil -T601; ee=$((ee+$?))
    - ./rkutil -T602; ee=$((ee+$?))
    - ./rkutil -T603; ee=$((ee+$?))
    - ./rkutil -T604; ee=$((ee+$?))
    - echo -n "" && [[ ${ee} == 0 ]] && echo ${PASS_STRING} || echo ${FAIL_STRING}
    - exit ${ee}
# should_fail:
#   tags:
#     - linux
#   stage: test
#   image: gcc
#   needs:
#     - build_linux
#   script:
#     - cd radarkit
#     - exit 1
