classdef iqread
    properties (Constant)
        constants = struct(...
            'RKNameLength', 128, ...
            'RKFileHeaderSize', 4096, ...
            'RKMaxMatchedFilterCount', 8, ...
            'RKFilterAnchorSize', 64, ...
            'RKMaximumStringLength', 4096, ...
            'RKMaximumPathLength', 1024, ...
            'RKMaximumPrefixLength', 8, ...
            'RKMaximumFolderPathLength', 768, ...
            'RKRadarDesc', 1072, ...
            'RKConfig', 1441, ...
            'RKMaximumCommandLength', 512, ...
            'RKMaxFilterCount', 8, ...
            'RKPulseHeaderPaddedSize', 256);
    end
    properties
        filename = '';
        header = struct('preface', [], 'buildNo', 0, 'desc', [], 'config', []);
        pulses = []
    end
    methods
        % Constructor
        function self = iqread(filename, maxPulse)
            if ~exist('maxPulse', 'var'), maxPulse = inf; end
            fprintf('Filename: %s\n', filename);
            self.filename = filename;
            fid = fopen(self.filename);
            if (fid < 0)
                error('Unable to open file.');
            end

            % Header
            self.header.preface = fread(fid, [1 self.constants.RKNameLength], 'char=>char');
            self.header.buildNo = fread(fid, 1, 'uint32');
            
            % Header->desc
            if self.header.buildNo >= 2
                h = memmapfile(self.filename, ...
                    'Offset', self.constants.RKNameLength + 4, ...    % RKNameLength * (char) + (uint32_t)
                    'Repeat', 1, ...
                    'Format', { ...
                        'uint32', [1 1], 'initFlags'; ...
                        'uint32', [1 1], 'pulseCapacity'; ...
                        'uint16', [1 1], 'pulseToRayRatio'; ...
                        'uint16', [1 1], 'doNotUse'; ...
                        'uint32', [1 1], 'healthNodeCount'; ...
                        'uint32', [1 1], 'healthBufferDepth'; ...
                        'uint32', [1 1], 'statusBufferDepth'; ...
                        'uint32', [1 1], 'configBufferDepth'; ...
                        'uint32', [1 1], 'positionBufferDepth'; ...
                        'uint32', [1 1], 'pulseBufferDepth'; ...
                        'uint32', [1 1], 'rayBufferDepth'; ...
                        'uint32', [1 1], 'productBufferDepth'; ...
                        'uint32', [1 1], 'controlCapacity'; ...
                        'uint32', [1 1], 'waveformCalibrationCapacity'; ...
                        'uint64', [1 1], 'healthNodeBufferSize'; ...
                        'uint64', [1 1], 'healthBufferSize'; ...
                        'uint64', [1 1], 'statusBufferSize'; ...
                        'uint64', [1 1], 'configBufferSize'; ...
                        'uint64', [1 1], 'positionBufferSize'; ...
                        'uint64', [1 1], 'pulseBufferSize'; ...
                        'uint64', [1 1], 'rayBufferSize'; ...
                        'uint64', [1 1], 'productBufferSize'; ...
                        'uint32', [1 1], 'pulseSmoothFactor'; ...
                        'uint32', [1 1], 'pulseTicsPerSecond'; ...
                        'uint32', [1 1], 'positionSmoothFactor'; ...
                        'uint32', [1 1], 'positionTicsPerSecond'; ...
                        'double', [1 1], 'positionLatency'; ...
                        'double', [1 1], 'latitude'; ...
                        'double', [1 1], 'longitude'; ...
                        'single', [1 1], 'heading'; ...
                        'single', [1 1], 'radarHeight'; ...
                        'single', [1 1], 'wavelength'; ...
                        'uint8',  [1 self.constants.RKNameLength], 'name_raw'; ...
                        'uint8',  [1 self.constants.RKMaximumPrefixLength], 'filePrefix_raw'; ...
                        'uint8',  [1 self.constants.RKMaximumFolderPathLength], 'dataPath_raw'});
            elseif self.header.buildNo == 1
                h = memmapfile(self.filename, ...
                    'Offset', self.constants.RKNameLength + 4, ...    % RKNameLength * (char) + (uint32_t)
                    'Repeat', 1, ...
                    'Format', { ...
                        'uint32', [1 1], 'initFlags'; ...
                        'uint32', [1 1], 'pulseCapacity'; ...
                        'uint32', [1 1], 'pulseToRayRatio'; ...
                        'uint32', [1 1], 'healthNodeCount'; ...
                        'uint32', [1 1], 'configBufferDepth'; ...
                        'uint32', [1 1], 'positionBufferDepth'; ...
                        'uint32', [1 1], 'pulseBufferDepth'; ...
                        'uint32', [1 1], 'rayBufferDepth'; ...
                        'uint32', [1 1], 'controlCount'; ...
                        'double', [1 1], 'latitude'; ...
                        'double', [1 1], 'longitude'; ...
                        'single', [1 1], 'heading'; ...
                        'single', [1 1], 'radarHeight'; ...
                        'single', [1 1], 'wavelength'; ...
                        'uint8',  [1 self.constants.RKNameLength], 'name_raw'; ...
                        'uint8',  [1 self.constants.RKNameLength], 'filePrefix_raw'; ...
                        'uint8',  [1 self.constants.RKMaximumPathLength], 'dataPath_raw'});

            end
            self.header.desc = h.data;
            self.header.desc.name = deblank(char(self.header.desc.name_raw));
            self.header.desc.filePrefix = deblank(char(self.header.desc.filePrefix_raw));
            self.header.desc.dataPath = deblank(char(self.header.desc.dataPath_raw));
            
            % Header->config
            if self.header.buildNo >= 5
                % (RKName) + (uint32_t) + (RKRadarDesc) --> RKConfig
                offset = self.constants.RKNameLength + 4 + self.constants.RKRadarDesc;
                c = memmapfile(self.filename, ...
                    'Offset', offset, ...
                    'Repeat', 1, ...
                    'Format', { ...
                        'uint64', [1 1], 'i'; ...
                        'single', [1 1], 'sweepElevation'; ...
                        'single', [1 1], 'sweepAzimuth'; ...
                        'uint32', [1 1], 'startMarker'; ...
                        'uint8',  [1 1], 'filterCount'});
                % + above
                offset = offset + 21;
                c2 = memmapfile(self.filename, ...
                    'Offset', offset, ...
                    'Repeat', self.constants.RKMaxFilterCount, ...
                    'Format', { ...
                        'uint32', [1 1], 'name'; ...
                        'uint32', [1 1], 'origin'; ...
                        'uint32', [1 1], 'length'; ...
                        'uint32', [1 1], 'inputOrigin'; ...
                        'uint32', [1 1], 'outputOrigin'; ...
                        'uint32', [1 1], 'maxDataLength'; ...
                        'single', [1 1], 'subCarrierFrequency'; ...
                        'single', [1 1], 'sensitivityGain'; ...
                        'single', [1 1], 'filterGain'; ...
                        'single', [1 1], 'fullScale'; ...
                        'single', [1 1], 'lowerBoundFrequency'; ...
                        'single', [1 1], 'upperBoundFrequency'; ...
                        'uint8',  [1 16], 'padding'});
                % + RKMaxFilterCount * RKFilterAnchorSize
                offset = offset + self.constants.RKMaxFilterCount * self.constants.RKFilterAnchorSize;
                c3 = memmapfile(self.filename, ...
                     'Offset', offset, ...
                     'Repeat', 1, ...
                     'Format', { ...
                        'single', [1 self.constants.RKMaxFilterCount], 'prt'; ...
                        'single', [1 self.constants.RKMaxFilterCount], 'pw'; ...
                        'uint32', [1 1], 'pulseGateCount'; ...
                        'single', [1 1], 'pulseGateSize'; ...
                        'uint32', [1 1], 'pulseRingFilterGateCount'; ...
                        'uint32', [1 self.constants.RKMaxFilterCount], 'waveformId'; ...
                        'single', [1 2], 'noise'; ...
                        'single', [1 2], 'systemZCal'; ...
                        'single', [1 1], 'systemDCal'; ...
                        'single', [1 1], 'systemPCal'; ...
                        'single', [self.constants.RKMaxFilterCount 2], 'ZCal'; ...
                        'single', [self.constants.RKMaxFilterCount 1], 'DCal'; ...
                        'single', [self.constants.RKMaxFilterCount 1], 'PCal'; ...
                        'single', [1 1], 'SNRThreshold'; ...
                        'uint8',  [1 self.constants.RKNameLength], 'waveform_raw'; ...
                        'uint8',  [1 self.constants.RKMaximumCommandLength], 'vcpDefinition_raw'});
                self.header.config = c.data;
                self.header.config.filterAnchors = c2.data;
                for ii = 1:length(c3.Format) - 2
                    self.header.config.(c3.Format{ii, 3}) = c3.data.(c3.Format{ii, 3});
                end
                self.header.config.waveform = deblank(char(c3.data.waveform_raw));
                self.header.config.vcpDefinition = deblank(char(c3.data.vcpDefinition_raw));
                % (RKName) + (uint32_t) + (RKRadarDesc) --> RKConfig --> RKRawDataType
                offset = self.constants.RKNameLength + 4 + self.constants.RKRadarDesc + self.constants.RKConfig;
                fseek(fid, offset, 'bof');
                self.header.dataType = fread(fid, 1, 'uint8');
                if self.header.dataType == 2
                    str = 'compressed';
                else
                    str = 'raw';
                end
                fprintf('dataType = %d (%s)\n', self.header.dataType, str);
            elseif self.header.buildNo >= 2
                % (RKName) + (uint32_t) + (RKRadarDesc) --> RKConfig
                offset = self.constants.RKNameLength + 4 + self.constants.RKRadarDesc;
                c = memmapfile(self.filename, ...
                    'Offset', offset, ...
                    'Repeat', 1, ...
                    'Format', { ...
                        'uint64', [1 1], 'i'; ...
                        'single', [1 1], 'sweepElevation'; ...
                        'single', [1 1], 'sweepAzimuth'; ...
                        'uint32', [1 1], 'startMarker'; ...
                        'uint8',  [1 1], 'filterCount'});
                % + above
                offset = offset + 21;
                c2 = memmapfile(self.filename, ...
                    'Offset', offset, ...
                    'Repeat', self.constants.RKMaxFilterCount, ...
                    'Format', { ...
                        'uint32', [1 1], 'name'; ...
                        'uint32', [1 1], 'origin'; ...
                        'uint32', [1 1], 'length'; ...
                        'uint32', [1 1], 'inputOrigin'; ...
                        'uint32', [1 1], 'outputOrigin'; ...
                        'uint32', [1 1], 'maxDataLength'; ...
                        'single', [1 1], 'subCarrierFrequency'; ...
                        'single', [1 1], 'sensitivityGain'; ...
                        'single', [1 1], 'filterGain'; ...
                        'single', [1 1], 'fullScale'; ...
                        'single', [1 1], 'lowerBoundFrequency'; ...
                        'single', [1 1], 'upperBoundFrequency'; ...
                        'uint8',  [1 16], 'padding'});
                % + RKMaxFilterCount * RKFilterAnchorSize
                offset = offset + self.constants.RKMaxFilterCount * self.constants.RKFilterAnchorSize;
                c3 = memmapfile(self.filename, ...
                     'Offset', offset, ...
                     'Repeat', 1, ...
                     'Format', { ...
                        'uint32', [1 self.constants.RKMaxFilterCount], 'pw'; ...
                        'uint32', [1 self.constants.RKMaxFilterCount], 'prf'; ...
                        'uint32', [1 1], 'pulseGateCount'; ...
                        'single', [1 1], 'pulseGateSize'; ...
                        'uint32', [1 1], 'pulseRingFilterGateCount'; ...
                        'uint32', [1 self.constants.RKMaxFilterCount], 'waveformId'; ...
                        'single', [1 2], 'noise'; ...
                        'single', [1 2], 'systemZCal'; ...
                        'single', [1 1], 'systemDCal'; ...
                        'single', [1 1], 'systemPCal'; ...
                        'single', [self.constants.RKMaxFilterCount 2], 'ZCal'; ...
                        'single', [self.constants.RKMaxFilterCount 1], 'DCal'; ...
                        'single', [self.constants.RKMaxFilterCount 1], 'PCal'; ...
                        'single', [1 1], 'SNRThreshold'; ...
                        'uint8',  [1 self.constants.RKNameLength], 'waveform_raw'; ...
                        'uint8',  [1 self.constants.RKMaximumCommandLength], 'vcpDefinition_raw'});
                self.header.config = c.data;
                self.header.config.filterAnchors = c2.data;
                for ii = 1:length(c3.Format) - 2
                    self.header.config.(c3.Format{ii, 3}) = c3.data.(c3.Format{ii, 3});
                end
                self.header.config.waveform = deblank(char(c3.data.waveform_raw));
                self.header.config.vcpDefinition = deblank(char(c3.data.vcpDefinition_raw));
                self.header.dataType = 1;
            elseif self.header.buildNo == 1
                c = memmapfile(self.filename, ...
                    'Offset', self.constants.RKNameLength + 4 + self.constants.RKRadarDesc, ... % RKNameLength * (char) + (uint32_t) + (RKRadarDesc)
                    'Repeat', 1, ...
                    'Format', { ...
                        'uint64', [1 1], 'i'; ...
                        'uint32', [1 self.constants.RKMaxFilterCount], 'pw'; ...
                        'uint32', [1 self.constants.RKMaxFilterCount], 'prf'; ...
                        'uint32', [1 self.constants.RKMaxFilterCount], 'gateCount'; ...
                        'uint32', [1 self.constants.RKMaxFilterCount], 'waveformId'; ...
                        'single', [1 2], 'noise'; ...
                        'single', [self.constants.RKMaxFilterCount 2], 'ZCal'; ...
                        'single', [self.constants.RKMaxFilterCount 1], 'DCal'; ...
                        'single', [self.constants.RKMaxFilterCount 1], 'PCal'; ...
                        'single', [1 1], 'SNRThreshold'; ...
                        'single', [1 1], 'sweepElevation'; ...
                        'single', [1 1], 'sweepAzimuth'; ...
                        'uint32', [1 1], 'startMarker'; ...
                        'uint8',  [1 self.constants.RKNameLength], 'waveform_raw'; ...
                        'uint8',  [1 self.constants.RKNameLength], 'vcpDefinition_raw'});
                self.header.config = c.data;
                self.header.config.waveform = deblank(char(self.header.config.waveform_raw));
                self.header.config.vcpDefinition = deblank(char(self.header.config.vcpDefinition_raw));
                self.header.dataType = 1;
            end

            % Partially read the very first pulse
            fseek(fid, self.constants.RKFileHeaderSize + 28, 'bof');
            capacity = fread(fid, 1, 'uint32');
            gateCount = fread(fid, 1, 'uint32');
            downSampledGateCount = fread(fid, 1, 'uint32');
            fclose(fid);
            fprintf('gateCount = %d   capacity = %d   downSampledGateCount = %d\n', gateCount, capacity, downSampledGateCount);
            
            % Some dimensions
            if isfinite(maxPulse)
                fprintf('Reading %d pulses ...\n', maxPulse);
            else
                fprintf('Reading all pulses ...\n');
            end
            
            % Pulses
            if self.header.dataType == 2
                % Compressed I/Q
                m = memmapfile(self.filename, ...
                    'Offset', self.constants.RKFileHeaderSize, ...
                    'Repeat', maxPulse, ...
                    'Format', { ...
                        'uint64', [1 1], 'i'; ...
                        'uint64', [1 1], 'n'; ...
                        'uint64', [1 1], 't'; ...
                        'uint32', [1 1], 's'; ...
                        'uint32', [1 1], 'capacity'; ...
                        'uint32', [1 1], 'gateCount'; ...
                        'uint32', [1 1], 'downSampledGateCount'; ...
                        'uint32', [1 1], 'marker'; ...
                        'uint32', [1 1], 'pulseWidthSampleCount'; ...
                        'uint64', [1 1], 'time_tv_sec'; ...
                        'uint64', [1 1], 'time_tv_usec'; ...
                        'double', [1 1], 'timeDouble'; ...
                        'uint8',  [1 4], 'rawAzimuth'; ...
                        'uint8',  [1 4], 'rawElevation'; ...
                        'uint16', [1 1], 'configIndex'; ...
                        'uint16', [1 1], 'configSubIndex'; ...
                        'uint16', [1 1], 'azimuthBinIndex'; ...
                        'single', [1 1], 'gateSizeMeters'; ...
                        'single', [1 1], 'elevationDegrees'; ...
                        'single', [1 1], 'azimuthDegrees'; ...
                        'single', [1 1], 'elevationVelocityDegreesPerSecond'; ...
                        'single', [1 1], 'azimuthVelocityDegreesPerSecond'; ...
                        'single', [2 downSampledGateCount 2], 'iq'});
            else
                % Raw I/Q straight from the transceiver
                m = memmapfile(self.filename, ...
                    'Offset', self.constants.RKFileHeaderSize, ...
                    'Repeat', maxPulse, ...
                    'Format', { ...
                        'uint64', [1 1], 'i'; ...
                        'uint64', [1 1], 'n'; ...
                        'uint64', [1 1], 't'; ...
                        'uint32', [1 1], 's'; ...
                        'uint32', [1 1], 'capacity'; ...
                        'uint32', [1 1], 'gateCount'; ...
                        'uint32', [1 1], 'downSampledGateCount'; ...
                        'uint32', [1 1], 'marker'; ...
                        'uint32', [1 1], 'pulseWidthSampleCount'; ...
                        'uint64', [1 1], 'time_tv_sec'; ...
                        'uint64', [1 1], 'time_tv_usec'; ...
                        'double', [1 1], 'timeDouble'; ...
                        'uint8',  [1 4], 'rawAzimuth'; ...
                        'uint8',  [1 4], 'rawElevation'; ...
                        'uint16', [1 1], 'configIndex'; ...
                        'uint16', [1 1], 'configSubIndex'; ...
                        'uint16', [1 1], 'azimuthBinIndex'; ...
                        'single', [1 1], 'gateSizeMeters'; ...
                        'single', [1 1], 'elevationDegrees'; ...
                        'single', [1 1], 'azimuthDegrees'; ...
                        'single', [1 1], 'elevationVelocityDegreesPerSecond'; ...
                        'single', [1 1], 'azimuthVelocityDegreesPerSecond'; ...
                        'int16',  [2 gateCount 2], 'iq'});
            end
            self.pulses = m.Data;
        end
    end
end
